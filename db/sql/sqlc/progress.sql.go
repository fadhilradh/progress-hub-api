// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: progress.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createProgress = `-- name: CreateProgress :exec
INSERT INTO progress(
    chart_id, 
    range_value, 
    progress_value, 
    created_at,
    progress_no
)
VALUES(
    $1, 
    $2, 
    $3,
    now(),
    $4
) RETURNING id, chart_id, progress_value, range_value, created_at, updated_at, progress_no
`

type CreateProgressParams struct {
	ChartID       uuid.NullUUID `json:"chart_id"`
	RangeValue    string        `json:"range_value"`
	ProgressValue int64         `json:"progress_value"`
	ProgressNo    int32         `json:"progress_no"`
}

func (q *Queries) CreateProgress(ctx context.Context, arg CreateProgressParams) error {
	_, err := q.db.ExecContext(ctx, createProgress,
		arg.ChartID,
		arg.RangeValue,
		arg.ProgressValue,
		arg.ProgressNo,
	)
	return err
}

const getProgressByChartID = `-- name: GetProgressByChartID :many
SELECT id, chart_id, progress_value, range_value, created_at, updated_at, progress_no FROM progress WHERE chart_id = $1
`

func (q *Queries) GetProgressByChartID(ctx context.Context, chartID uuid.NullUUID) ([]Progress, error) {
	rows, err := q.db.QueryContext(ctx, getProgressByChartID, chartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Progress{}
	for rows.Next() {
		var i Progress
		if err := rows.Scan(
			&i.ID,
			&i.ChartID,
			&i.ProgressValue,
			&i.RangeValue,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProgressNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
