// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
)

type Range string

const (
	RangeDaily   Range = "daily"
	RangeWeekly  Range = "weekly"
	RangeMonthly Range = "monthly"
	RangeYearly  Range = "yearly"
)

func (e *Range) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Range(s)
	case string:
		*e = Range(s)
	default:
		return fmt.Errorf("unsupported scan type for Range: %T", src)
	}
	return nil
}

type NullRange struct {
	Range Range
	Valid bool // Valid is true if Range is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRange) Scan(value interface{}) error {
	if value == nil {
		ns.Range, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Range.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRange) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Range), nil
}

type Role string

const (
	RoleUser       Role = "user"
	RoleAdmin      Role = "admin"
	RoleSuperadmin Role = "superadmin"
)

func (e *Role) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Role(s)
	case string:
		*e = Role(s)
	default:
		return fmt.Errorf("unsupported scan type for Role: %T", src)
	}
	return nil
}

type NullRole struct {
	Role  Role
	Valid bool // Valid is true if Role is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRole) Scan(value interface{}) error {
	if value == nil {
		ns.Role, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Role.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Role), nil
}

type Progress struct {
	ID            uuid.UUID      `json:"id"`
	ProgressName  sql.NullString `json:"progress_name"`
	ProgressValue sql.NullInt64  `json:"progress_value"`
	RangeType     NullRange      `json:"range_type"`
	RangeValue    sql.NullString `json:"range_value"`
	CreatedAt     sql.NullTime   `json:"created_at"`
	UpdatedAt     sql.NullTime   `json:"updated_at"`
	UserID        uuid.NullUUID  `json:"user_id"`
}

type User struct {
	ID              uuid.UUID      `json:"id"`
	Username        string         `json:"username"`
	Email           string         `json:"email"`
	Password        string         `json:"password"`
	CreatedAt       sql.NullTime   `json:"created_at"`
	UpdatedAt       sql.NullTime   `json:"updated_at"`
	Role            NullRole       `json:"role"`
	PhotoProfileUrl sql.NullString `json:"photo_profile_url"`
}
