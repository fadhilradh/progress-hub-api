// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: chart.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createChart = `-- name: CreateChart :one
INSERT INTO charts(
    user_id, 
    range_type, 
    progress_name, 
    created_at,
    colors,
    chart_type,
    bar_chart_type
)
VALUES(
    $1, 
    $2, 
    $3,
    now(),
    $4,
    $5,
    $6
) RETURNING id, user_id, created_at, updated_at, range_type, progress_name, colors, chart_type, bar_chart_type
`

type CreateChartParams struct {
	UserID       uuid.NullUUID `json:"user_id"`
	RangeType    *string       `json:"range_type"`
	ProgressName *string       `json:"progress_name"`
	Colors       *string       `json:"colors"`
	ChartType    *string       `json:"chart_type"`
	BarChartType *string       `json:"bar_chart_type"`
}

func (q *Queries) CreateChart(ctx context.Context, arg CreateChartParams) (Chart, error) {
	row := q.db.QueryRowContext(ctx, createChart,
		arg.UserID,
		arg.RangeType,
		arg.ProgressName,
		arg.Colors,
		arg.ChartType,
		arg.BarChartType,
	)
	var i Chart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RangeType,
		&i.ProgressName,
		&i.Colors,
		&i.ChartType,
		&i.BarChartType,
	)
	return i, err
}

const getChartByID = `-- name: GetChartByID :one
SELECT id, user_id, created_at, updated_at, range_type, progress_name, colors, chart_type, bar_chart_type FROM charts WHERE id = $1
`

func (q *Queries) GetChartByID(ctx context.Context, id uuid.UUID) (Chart, error) {
	row := q.db.QueryRowContext(ctx, getChartByID, id)
	var i Chart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RangeType,
		&i.ProgressName,
		&i.Colors,
		&i.ChartType,
		&i.BarChartType,
	)
	return i, err
}

const listChartProgressByUserId = `-- name: ListChartProgressByUserId :many
SELECT c.id as chart_id, c.colors as chart_color, c.chart_type, c.bar_chart_type, p.id as progress_id, c.range_type, p.range_value, c.progress_name, p.progress_value,  
p.updated_at as progress_updated_at, p.progress_no
FROM charts c
INNER JOIN progress p ON c.id = p.chart_id 
WHERE c.user_id = $1
ORDER BY chart_id DESC
`

type ListChartProgressByUserIdRow struct {
	ChartID           uuid.UUID `json:"chart_id"`
	ChartColor        string    `json:"chart_color"`
	ChartType         *string   `json:"chart_type"`
	BarChartType      *string   `json:"bar_chart_type"`
	ProgressID        uuid.UUID `json:"progress_id"`
	RangeType         *string   `json:"range_type"`
	RangeValue        *string   `json:"range_value"`
	ProgressName      *string   `json:"progress_name"`
	ProgressValue     *int64    `json:"progress_value"`
	ProgressUpdatedAt time.Time `json:"progress_updated_at"`
	ProgressNo        *int32    `json:"progress_no"`
}

func (q *Queries) ListChartProgressByUserId(ctx context.Context, userID uuid.NullUUID) ([]ListChartProgressByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, listChartProgressByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListChartProgressByUserIdRow{}
	for rows.Next() {
		var i ListChartProgressByUserIdRow
		if err := rows.Scan(
			&i.ChartID,
			&i.ChartColor,
			&i.ChartType,
			&i.BarChartType,
			&i.ProgressID,
			&i.RangeType,
			&i.RangeValue,
			&i.ProgressName,
			&i.ProgressValue,
			&i.ProgressUpdatedAt,
			&i.ProgressNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChart = `-- name: UpdateChart :exec
UPDATE charts SET 
    range_type = COALESCE($2, range_type), 
    progress_name = COALESCE($3, progress_name),
    colors = COALESCE($4, colors),
    chart_type = COALESCE($5, chart_type),
    bar_chart_type = COALESCE($6, bar_chart_type),
    updated_at = now()
WHERE id = $1
`

type UpdateChartParams struct {
	ID           uuid.UUID `json:"id"`
	RangeType    *string   `json:"range_type"`
	ProgressName *string   `json:"progress_name"`
	Colors       *string   `json:"colors"`
	ChartType    *string   `json:"chart_type"`
	BarChartType *string   `json:"bar_chart_type"`
}

func (q *Queries) UpdateChart(ctx context.Context, arg UpdateChartParams) error {
	_, err := q.db.ExecContext(ctx, updateChart,
		arg.ID,
		arg.RangeType,
		arg.ProgressName,
		arg.Colors,
		arg.ChartType,
		arg.BarChartType,
	)
	return err
}
